- Determinar variables live fuera de bloque
    . Se podría revisar del final al inicio el código para determinar las variables live y hacer los address descriptors.
- Inicializar los registos disponibles en MIPS (como register descriptors)
- Empezar a leer el código intermedio
- Al leer un método, producis el label del método y luego buscas el tamaño del método. 
- Colocar tamaño de método en Stack
- Inicializar lista de  address descriptors. 
- Partir operación en operandos y conseguir el operador de la operación 
- Traducir operando a operación de assembler (+ -> add, - -> sub, y así)
- Hacer operaciones de Load, Store, Copy, Operation (una suma, resta, etc)
- Diseñar función getReg(instruccion)
    . Tomar de referencia la del libro
- Valores de retorno, llamadas a métodos

también se tiene que tomar en consideración que los temporales no se guardan en registros.
    . Dividir las funciones y obtener el registro correspondiente para cada una
- Static allocation y stack allocation para funciones y valores de retorno
    . Para esto nos beneficiamos de tener las variables como G/L[offset] 

----------------------------------------------------------------------------
Leer labels y producir labels
Calcular tamaño de metodo (sumar las variables del scope) y alocarlo al stack 
Ir manejando register descriptos y address descriptors 
En base al libro, hacer las operaciones de store, load, etc...
Manejar getReg por cada instrucción individual 
